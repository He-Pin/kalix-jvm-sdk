// Copyright 2021 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

package akkaserverless.pingpong;

option java_package = "com.akkaserverless.pingpong";

message PongSent {
    string id = 1 [(akkaserverless.field).entity_key = true];
    int32 sequence_number = 2;
}

message PingSent {
    string id = 1 [(akkaserverless.field).entity_key = true];
    int32 sequence_number = 2;
}

message PingSeen {
    string id = 1 [(akkaserverless.field).entity_key = true];
    int32 sequence_number = 2;
}

message PongSeen {
    string id = 1 [(akkaserverless.field).entity_key = true];
    int32 sequence_number = 2;
}

message PingPongStats {
    int32 sentPings = 1;
    int32 seenPings = 2;
    int32 sentPongs = 3;
    int32 seenPongs = 4;
}

message GetReport {
  string id = 1 [(akkaserverless.field).entity_key = true];
}

service PingPongService {

  rpc Ping(PongSent) returns (PingSent) {
    option (akkaserverless.method).eventing.out = {
      topic: "pings"
    };
  }

  rpc Pong(PingSent) returns (PongSent) {
    option (akkaserverless.method).eventing.out = {
      topic: "pongs"
    };
  }

  rpc SeenPong(PongSent) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      topic: "pongs"
    };
  }

  rpc SeenPing(PingSent) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      topic: "pings"
    };
  }

  rpc Report(GetReport) returns (PingPongStats) {
    option (google.api.http) = {
          get: "/pingpong/{id}"
    };
  }

}
